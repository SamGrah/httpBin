// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: adapters/bin.proto

package binManager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BinManagerClient is the client API for BinManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BinManagerClient interface {
	GenerateNewBin(ctx context.Context, in *Params, opts ...grpc.CallOption) (*BinId, error)
	LogRequestToBin(ctx context.Context, in *Params, opts ...grpc.CallOption) (*LoggedRequests, error)
}

type binManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewBinManagerClient(cc grpc.ClientConnInterface) BinManagerClient {
	return &binManagerClient{cc}
}

func (c *binManagerClient) GenerateNewBin(ctx context.Context, in *Params, opts ...grpc.CallOption) (*BinId, error) {
	out := new(BinId)
	err := c.cc.Invoke(ctx, "/binManager.BinManager/GenerateNewBin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binManagerClient) LogRequestToBin(ctx context.Context, in *Params, opts ...grpc.CallOption) (*LoggedRequests, error) {
	out := new(LoggedRequests)
	err := c.cc.Invoke(ctx, "/binManager.BinManager/LogRequestToBin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BinManagerServer is the server API for BinManager service.
// All implementations must embed UnimplementedBinManagerServer
// for forward compatibility
type BinManagerServer interface {
	GenerateNewBin(context.Context, *Params) (*BinId, error)
	LogRequestToBin(context.Context, *Params) (*LoggedRequests, error)
	mustEmbedUnimplementedBinManagerServer()
}

// UnimplementedBinManagerServer must be embedded to have forward compatible implementations.
type UnimplementedBinManagerServer struct {
}

func (UnimplementedBinManagerServer) GenerateNewBin(context.Context, *Params) (*BinId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateNewBin not implemented")
}
func (UnimplementedBinManagerServer) LogRequestToBin(context.Context, *Params) (*LoggedRequests, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogRequestToBin not implemented")
}
func (UnimplementedBinManagerServer) mustEmbedUnimplementedBinManagerServer() {}

// UnsafeBinManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BinManagerServer will
// result in compilation errors.
type UnsafeBinManagerServer interface {
	mustEmbedUnimplementedBinManagerServer()
}

func RegisterBinManagerServer(s grpc.ServiceRegistrar, srv BinManagerServer) {
	s.RegisterService(&BinManager_ServiceDesc, srv)
}

func _BinManager_GenerateNewBin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Params)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinManagerServer).GenerateNewBin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binManager.BinManager/GenerateNewBin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinManagerServer).GenerateNewBin(ctx, req.(*Params))
	}
	return interceptor(ctx, in, info, handler)
}

func _BinManager_LogRequestToBin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Params)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinManagerServer).LogRequestToBin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/binManager.BinManager/LogRequestToBin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinManagerServer).LogRequestToBin(ctx, req.(*Params))
	}
	return interceptor(ctx, in, info, handler)
}

// BinManager_ServiceDesc is the grpc.ServiceDesc for BinManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BinManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "binManager.BinManager",
	HandlerType: (*BinManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateNewBin",
			Handler:    _BinManager_GenerateNewBin_Handler,
		},
		{
			MethodName: "LogRequestToBin",
			Handler:    _BinManager_LogRequestToBin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "adapters/bin.proto",
}
